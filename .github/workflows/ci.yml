name: CI
on:
  push:
    branches:
      - "**"

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win32
            arch: x64
            npm_config_arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
            npm_config_arch: x64
          - os: ubuntu-latest
            platform: alpine
            arch: x64
            npm_config_arch: x64
          - os: macos-latest
            platform: darwin
            arch: x64
            npm_config_arch: x64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - run: npm install
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          npm_config_arch: ${{ matrix.npm_config_arch }}

      - shell: pwsh
        run: echo "version=$(npx -q git-conventional-commits version)" >> $env:GITHUB_ENV
      - shell: pwsh
        run: echo "target=${{ matrix.platform }}-${{ matrix.arch }}" >> $env:GITHUB_ENV
      - shell: pwsh
        run: npx @vscode/vsce package --target ${{ env.target }} --no-git-tag-version --no-update-package-json ${{ env.version }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.target }}
          path: "*.vsix"

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: success() && github.ref == 'refs/heads/main'
    steps:
      # Checkout all commits, so we get previous tags
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4

      # This is needed so that we can create git tags
      - name: Set git user
        run: |
          git config --local user.name "ci-bot"
          git config --local user.email "github@clave.no"

      - name: Get version
        id: version
        run: echo "version=$(npx -q git-conventional-commits version)" >> $GITHUB_OUTPUT

      - name: Changelog
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: "npm version ${{ env.VERSION }} -m 'release: %s'"

      - run: npx @vscode/vsce publish --packagePath $(find . -iname *.vsix)
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      - run: "git push --follow-tags"
